@page
@model DadJokesApp.Web.Pages.SearchJokeModel
@{
    ViewData["Title"] = "Search Jokes";
}

<div class="container">
    <h2>Search Dad Jokes</h2>

    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" id="search-term" class="form-control" placeholder="Enter search term...">
                <button id="search-btn" class="btn btn-primary">Search</button>
            </div>
            <div id="search-error" class="text-danger mt-2 d-none">
                Please enter a search term
            </div>
        </div>
    </div>

    <div id="loading-indicator" class="d-none">
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    <div id="search-results" class="d-none">
        <div id="short-jokes-section" class="mb-4">
            <h4>Short Jokes (<10 words)</h4>
            <div id="short-jokes-container" class="joke-container">
            </div>
        </div>

        <div id="medium-jokes-section" class="mb-4">
            <h4>Medium Jokes (10-19 words)</h4>
            <div id="medium-jokes-container" class="joke-container">
            </div>
        </div>

        <div id="long-jokes-section" class="mb-4">
            <h4>Long Jokes (≥20 words)</h4>
            <div id="long-jokes-container" class="joke-container">
            </div>
        </div>

        <div id="no-results" class="alert alert-info d-none">
            No jokes found for the search term.
        </div>
    </div>
</div>

@section Styles {
    <style>
        .joke-container {
            margin-bottom: 20px;
        }

        .joke-card {
            background-color: #f8f9fa;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #007bff;
        }

        .joke-text {
            margin-bottom: 0;
        }

        .joke-text mark {
            background-color: #fff3cd;
            padding: 0 3px;
            border-radius: 3px;
        }
    </style>
}

@section Scripts {
    <script>
        const searchTermInput = document.getElementById('search-term');
        const searchButton = document.getElementById('search-btn');
        const searchError = document.getElementById('search-error');
        const loadingIndicator = document.getElementById('loading-indicator');
        const searchResults = document.getElementById('search-results');
        const shortJokesContainer = document.getElementById('short-jokes-container');
        const mediumJokesContainer = document.getElementById('medium-jokes-container');
        const longJokesContainer = document.getElementById('long-jokes-container');
        const noResults = document.getElementById('no-results');
        const shortJokesSection = document.getElementById('short-jokes-section');
        const mediumJokesSection = document.getElementById('medium-jokes-section');
        const longJokesSection = document.getElementById('long-jokes-section');

        searchTermInput.addEventListener('keyup', function(event) {
            if (event.key === 'Enter') {
                searchButton.click();
            }
        });

        searchButton.addEventListener('click', async function() {
            const searchTerm = searchTermInput.value.trim();

            if (!searchTerm) {
                searchError.classList.remove('d-none');
                return;
            }

            searchError.classList.add('d-none');
            showLoading();

            try {
                const response = await fetch(`https://localhost:7118/api/jokes/search?term=${encodeURIComponent(searchTerm)}`);

                if (!response.ok) {
                    if (response.status === 400) {
                        searchError.textContent = 'Search term cannot be empty';
                        searchError.classList.remove('d-none');
                    } else {
                        throw new Error('Failed to fetch jokes');
                    }
                    return;
                }

                const data = await response.json();
                displaySearchResults(data, searchTerm);

            } catch (error) {
                console.error('Error fetching jokes:', error);
                showError('An error occurred while searching for jokes');
            } finally {
                hideLoading();
            }
        });

        function displaySearchResults(data, searchTerm) {
            shortJokesContainer.innerHTML = '';
            mediumJokesContainer.innerHTML = '';
            longJokesContainer.innerHTML = '';

            const totalJokesCount =
                data.shortJokes.length +
                data.mediumJokes.length +
                data.longJokes.length;

            if (totalJokesCount === 0) {
                searchResults.classList.remove('d-none');
                noResults.classList.remove('d-none');
                shortJokesSection.classList.add('d-none');
                mediumJokesSection.classList.add('d-none');
                longJokesSection.classList.add('d-none');
                return;
            }

            noResults.classList.add('d-none');
            searchResults.classList.remove('d-none');

            if (data.shortJokes.length > 0) {
                shortJokesSection.classList.remove('d-none');
                data.shortJokes.forEach(joke => {
                    shortJokesContainer.appendChild(createJokeElement(joke));
                });
            } else {
                shortJokesSection.classList.add('d-none');
            }

            if (data.mediumJokes.length > 0) {
                mediumJokesSection.classList.remove('d-none');
                data.mediumJokes.forEach(joke => {
                    mediumJokesContainer.appendChild(createJokeElement(joke));
                });
            } else {
                mediumJokesSection.classList.add('d-none');
            }

            if (data.longJokes.length > 0) {
                longJokesSection.classList.remove('d-none');
                data.longJokes.forEach(joke => {
                    longJokesContainer.appendChild(createJokeElement(joke));
                });
            } else {
                longJokesSection.classList.add('d-none');
            }
        }

        function createJokeElement(joke) {
            const jokeCard = document.createElement('div');
            jokeCard.className = 'joke-card';

            const jokeText = document.createElement('p');
            jokeText.className = 'joke-text';

            const highlightedText = joke.highlightedText.replace(/<([^>]+)>/g, '<mark>$1</mark>');
            jokeText.innerHTML = highlightedText;

            jokeCard.appendChild(jokeText);
            return jokeCard;
        }

        function showLoading() {
            loadingIndicator.classList.remove('d-none');
            searchResults.classList.add('d-none');
        }

        function hideLoading() {
            loadingIndicator.classList.add('d-none');
        }

        function showError(message) {
            searchError.textContent = message;
            searchError.classList.remove('d-none');
        }
    </script>
}